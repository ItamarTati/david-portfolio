{"version":3,"sources":["PageOne.js","PageTwo.js","PageThree.js","App.js","serviceWorker.js","index.js"],"names":["PageOne","PageTwo","props","PageThree","App","nextPage","bind","prevPage","goToPageOne","goToPageTwo","goToPageThree","state","page","this","setState","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAaiBA,MATjB,WACI,OACI,6BACI,6CCOKC,EAVD,SAAAC,GACZ,OACI,6BACI,8CCMKC,EATC,SAAAD,GACd,OACI,6BACI,gDCyFKE,E,YAvFb,WAAYF,GAAQ,IAAD,8BACf,4CAAMA,KACDG,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,MAAQ,CACXC,KAAM,GARO,E,wEAcf,KAAGC,KAAKF,MAAMC,KAAO,GAGpB,OAAO,KAFRC,KAAKC,SAAS,CAAEF,KAAMC,KAAKF,MAAMC,KAAO,M,iCAMxC,GAAsB,IAAnBC,KAAKF,MAAMC,KAIX,OAAO,KAHVC,KAAKC,SAAS,CAAEF,KAAMC,KAAKF,MAAMC,KAAO,M,oCAQxCC,KAAKC,SAAS,CAAEF,KAAM,M,oCAItBC,KAAKC,SAAS,CAAEF,KAAM,M,sCAGtBC,KAAKC,SAAS,CAAEF,KAAM,M,+BAMhB,IACAA,EAASC,KAAKF,MAAdC,KAEN,OAGE,yBAAKG,UAAY,OACjB,yCACA,6CACL,wLACK,sHAEU,IAATH,EAAa,4BACI,4BAAK,2CACL,4BAAK,4BAAQI,QAAWH,KAAKJ,aAAxB,WACL,4BAAK,4BAAQO,QAAWH,KAAKH,eAAxB,YAEZ,IAATE,EAAa,4BACG,4BAAK,4BAAQI,QAAWH,KAAKL,aAAxB,WACL,4BAAK,2CACL,4BAAK,4BAAQQ,QAAWH,KAAKH,eAAxB,YAER,4BACG,4BAAK,4BAAQM,QAAWH,KAAKL,aAAxB,WACL,4BAAK,4BAAQQ,QAAWH,KAAKJ,aAAxB,WACL,4BAAK,4CAGb,IAATG,GAAc,kBAAC,EAAD,MACH,IAATA,GAAc,kBAAC,EAAD,MACL,IAATA,GAAc,kBAAC,EAAD,MACf,4BAAQI,QAAWH,KAAKN,UAAxB,iBACA,4BAAQS,QAAWH,KAAKR,UAAxB,kB,GA5EMY,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dc8a5105.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nfunction PageOne () {\n    return (\n        <div>\n            <p>I'm page One</p>\n        </div>\n        \n    );\n  };\n  \n  export default PageOne","import React from 'react';\n\n\n\nconst PageTwo = props => {\n    return (\n        <div>\n            <p>I am Page Two</p>\n\n        </div>\n        \n    );\n  };\n  \n  export default PageTwo","import React from 'react';\n\n\n\nconst PageThree = props => {\n    return (\n        <div>\n            <p>I am Page Three</p>\n\n        </div>\n    );\n  };\n  \n  export default PageThree","import React, { Component } from 'react';\nimport './App.css';\nimport PageOne from './PageOne';\nimport PageTwo from './PageTwo';\nimport PageThree from './PageThree';\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.nextPage = this.nextPage.bind(this);\n        this.prevPage = this.prevPage.bind(this);\n        this.goToPageOne = this.goToPageOne.bind(this);\n        this.goToPageTwo = this.goToPageTwo.bind(this);\n        this.goToPageThree = this.goToPageThree.bind(this);\n        this.state = {\n          page: 1,\n        };\n      }\n\n\n      nextPage() {\n        if(this.state.page < 3){\n        this.setState({ page: this.state.page + 1 } )\n      }\n    else return null \n    }\n\n      prevPage(){\n        if(this.state.page !==1){\n        this.setState({ page: this.state.page - 1 } )\n\n      }\n      else return null \n\n    }\n\n      goToPageOne(){\n        this.setState({ page: 1 } )\n\n      }\n      goToPageTwo(){\n        this.setState({ page: 2 } )\n      }\n      goToPageThree(){\n        this.setState({ page: 3 } )\n      }\n      \n\n      \n\n    render() {  \n      const { page } = this.state;\n\n        return (\n          \n\n          <div className = 'App' >\n          <h1>David Bud</h1>\n          <h2>Game Designer</h2>\n\t\t\t\t\t<p>Hi my name is David, I am a Passionate Games Designer that uses C#, JavaScript and Unity. I enjoy learning and challenging myself to be a better designer</p>\n          <p>If you're intrested in working with me please find contact details on the about me page</p> \n\n          {page === 1 ? <ul >\n                            <li ><button>Game 1</button></li>\n                            <li ><button onClick = {this.goToPageTwo}>Game 2</button></li>\n                            <li ><button onClick = {this.goToPageThree}>Game 3</button></li>\n                          </ul>: \n            page === 2 ? <ul >\n                            <li ><button onClick = {this.goToPageOne}>Game 1</button></li>\n                            <li ><button>Game 2</button></li>\n                            <li ><button onClick = {this.goToPageThree}>Game 3</button></li>\n                         </ul>:\n                         <ul >\n                            <li ><button onClick = {this.goToPageOne}>Game 1</button></li>\n                            <li ><button onClick = {this.goToPageTwo}>Game 2</button></li>\n                            <li ><button >Game 3</button></li>\n                          </ul>} \n            \n          {page === 1 && <PageOne  />}\n            {page === 2 && <PageTwo  />}\n            {page === 3 && <PageThree  /> }\n            <button onClick = {this.prevPage}>previous page</button>\n            <button onClick = {this.nextPage}>next page</button> \n\n\n        </div>\n        \n      );\n    }\n  }\n\n\n  \n  \n  export default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}